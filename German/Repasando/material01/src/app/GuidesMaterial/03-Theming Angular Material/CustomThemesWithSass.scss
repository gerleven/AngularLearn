//Paletts:
$indigo-palette: (
 50: #e8eaf6,
 100: #c5cae9,
 200: #9fa8da,
 300: #7986cb,
 // ... continues to 900
 contrast: (
   50: rgba(black, 0.87),
   100: rgba(black, 0.87),
   200: rgba(black, 0.87),
   300: white,
   // ... continues to 900
 )
);

//Create your own palette
//You can create your own palette by defining a Sass map that matches the structure described in the Palettes section above. The map must define hues for 50 and each hundred between 100 and 900. The map must also define a contrast map with contrast colors for each hue.

//Predefined Palettes
//Angular Material offers predefined palettes based on the 2014 version of the Material Design spec. See the Material Design 2014 color palettes for a full list.
$my-palette: mat.$indigo-palette;


/*
### Themes
A theme is a collection of color and typography options.
Each theme includes three palettes that determine component colors:

Primary palette: for the color that appears most frequently throughout your application
Accent (or secondary) palette: used to selectively highlight key parts of your UI
Warn, or error, palette: used for warnings and error states
You can include the CSS styles for a theme in your application in one of two ways: by defining a custom theme with Sass, or by importing a pre-built theme CSS file.

[[### Custom themes with Sass]]
A theme file is a Sass file that calls Angular Material Sass mixins to output color and typography CSS styles.

### Mixins
es una especie de funcion que recibe un theme por parametro (que puede tener un valor por defecto como DarkGray por ej) y como output genera un CSS resultante con varias reglas CSS que se generan en funcion del theme del input.
Ej de un mixin:
*/
@mixin theme ($inputTheme: DarkGray){
  background: $inputTheme;
  box-shadow: 0 0 1px rgba($inputTheme, .25);
  color: #fff;
}

.info{
  @include theme;
}

.alert{
  @include theme($inputTheme: DarkRed);
}

.success{
  @include theme($inputTheme: DarkGreen);
}
/*
###The core mixin
Angular Material defines a mixin named core that includes prerequisite styles for common features used by multiple components, such as ripples. The core mixin must be included exactly once for your application, even if you define multiple themes. Including the core mixin multiple times will result in duplicate CSS in your application.

*/
@use '~@angular/material' as mat;
@include mat.core();

/*
### Defining a theme:
Angular Material represents a theme as a Sass map that contains your color and typography choices.
For more about typography customization, see Angular Material Typography.
Constructing the theme first requires defining your primary and accent palettes, with an optional warn palette.
The define-palette Sass function accepts a color palette, described in the Palettes section above, as well as four optional hue numbers. These four hues represent, in order: the "default" hue, a "lighter" hue, a "darker" hue, and a "text" hue. Components use these hues to choose the most appropriate color for different parts of themselves.
*/
$my-primary: mat.define-palette(mat.$indigo-palette, 500);
$my-accent: mat.define-palette(mat.$pink-palette, A200, A100, A400);

// The "warn" palette is optional and defaults to red if not specified.
$my-warn: mat.define-palette(mat.$red-palette);

//You can construct a theme by calling either define-light-theme or define-dark-theme with the result from define-palette. The choice of a light versus a dark theme determines the background and foreground colors used throughout the components.
$my-theme: mat.define-light-theme((
 color: (
   primary: $my-primary,
   accent: $my-accent,
   warn: $my-warn,
 ),
 typography: mat.define-typography-config(
    $font-family: serif,
  )
));
/*
### Applying a theme to components
*/
// Emit theme-dependent styles for common features used across multiple components. 
@include mat.core-theme($my-theme);

// Emit styles for MatButton based on `$my-theme`. if the configuration
// passed to `define-light-theme` omits typography, `button-theme` will not
// emit any typography styles.
@include mat.button-theme($my-theme);

// Include the theme mixins for other components you use here...

//As an alternative to listing every component that your application uses, Angular Material offers Sass mixins that includes styles for all components in the library: all-component-colors, all-component-typographies, and all-component-themes. These mixins behave the same as individual component mixins, except they emit styles for core-theme and all 35+ components in Angular Material. Unless your application uses every single component, this will produce unnecessary CSS.
@include mat.all-component-themes($my-theme);

// -[[ To include the emitted styles in your application, add your theme file to the styles array of your project's angular.json file. ]]-
/*
### Using a pre-built theme
Angular Material includes four pre-built theme CSS files, each with different palettes selected. You can use one of these pre-built themes if you don't want to define a custom theme with Sass.
deeppurple-amber.css
indigo-pink.css
pink-bluegray.css
purple-green.css

These files include the CSS for every component in the library. To include only the CSS for a subset of components, you must use the Sass API

You can find the pre-built theme files in the "prebuilt-themes" directory of Angular Material's npm package (@angular/material/prebuilt-themes).
To include the pre-built theme in your application, add your chosen CSS file to the styles array of your project's angular.json file.

### Defining multiple themes
Using the Sass API, you can also define multiple themes by repeating the API calls multiple times. You can do this either in the same theme file or in separate theme files.
### Multiple themes in one file
Defining multiple themes in a single file allows you to support multiple themes without having to manage loading of multiple CSS assets. The downside, however, is that your CSS will include more styles than necessary.
*/
//Ej:
@use '~@angular/material' as mat;

@include mat.core();

// Define a light theme
$light-primary: mat.define-palette(mat.$indigo-palette);
$light-accent: mat.define-palette(mat.$pink-palette);
$light-theme: mat.define-light-theme((
 color: (
   primary: $light-primary,
   accent: $light-accent,
 )
));

// Define a dark theme
$dark-primary: mat.define-palette(mat.$pink-palette);
$dark-accent: mat.define-palette(mat.$blue-gray-palette);
$dark-theme: mat.define-dark-theme((
 color: (
   primary: $dark-primary,
   accent: $dark-accent,
 )
));

// Apply the dark theme by default
@include mat.core-theme($dark-theme); //Aca este se aplica por defecto porque no esta dentro de una CSS Rule tipo .miClase{...} como es el caso de .my-light-theme{...}
@include mat.button-theme($dark-theme);

// Apply the light theme only when the `.my-light-theme` CSS class is applied
// to an ancestor element of the components (such as `body`).
.my-light-theme {
 @include mat.core-color($light-theme); //Este tema se le aplicara solo a los elementos que tengan la clase .my-light-theme, por eso queda el dark como tema por defecto y este como uno especifico solo para los elementos que tengan la clase .my-light-theme
 @include mat.button-color($light-theme);
}
/*
Multiple themes across separate files
You can define multiple themes in seprate files by creating multiple theme files per Defining a theme, adding each of the files to the styles of your angular.json.
However, you -MUST- additionally set the inject option for each of these files to false in order to prevent all the theme files from being loaded at the same time. When setting this property to false, your application becomes responsible for manually loading the desired file. The approach for this loading depends on your application.

### Scoping style customizations
You can use Angular Material's Sass mixins to customize component styles within a specific scope in your application. The CSS rule declaration in which you include a Sass mixin determines its scope. The example below shows how to customize the color of all buttons inside elements marked with the .my-special-section CSS class.
*/
@use '~@angular/material' as mat;

.my-special-section {
 $special-primary: mat.define-palette(mat.$orange-palette);
 $special-accent: mat.define-palette(mat.$brown-palette);
 $special-theme: mat.define-dark-theme((
   color: (primary: $special-primary, accent: $special-accent),
 ));

 @include mat.button-color($special-theme); // Como consecuencia todos los botones que tengan la clase .my-special-section van a tener asignado el tema $special-theme
}
/*
### Reading hues from palettes
You can use the get-color-from-palette function to get specific hues from a palette by their number identifier.
You can also access the contrast color for a particular hue by suffixing the hue's number idenfier with -contrast.
*/
@use '~@angular/material' as mat;

$my-palette: mat.define-palette(mat.$indigo-palette);

.my-custom-style {
 background: mat.get-color-from-palette($my-palette, '500');
 color: mat.get-color-from-palette($my-palette, '500-contrast');
}
//You can also reference colors using the "default", "lighter", "darker", and "text" colors passed to define-palette.
.my-custom-darker-style {
  background: mat.get-color-from-palette($my-palette, 'darker');
  color: mat.get-color-from-palette($my-palette, 'darker-contrast');
 }
/*
### Strong focus indicators
Para cumplir con los requisitos de la WCAG no basta con que cambie el fondo de un componente cuando obtiene el foco, debe tener una se√±alizaion mas fuerte.
Angular ya tiene las highly visible outlines on focused elements
se pueden activar desde estos dos mixins: strong-focus-indicators y strong-focus-indicators-theme.

Angular Material supports rendering highly visible outlines on focused elements. Applications can enable these strong focus indicators via two Sass mixins: strong-focus-indicators and strong-focus-indicators-theme.
The strong-focus-indicators mixin emits structal indicator styles for all components. This mixin should be included exactly once in an application, similar to the core mixin described above.
The strong-focus-indicators-theme mixin emits only the indicator's color styles. This mixin should be included once per theme, similar to the theme mixins described above. Additionally, you can use this mixin to change the color of the focus indicators in situations in which the default color would not contrast sufficiently with the background color.
The following example includes strong focus indicator styles in an application alongside the rest of the custom theme API.

The following example includes strong focus indicator styles in an application alongside the rest of the custom theme API.
*/
@use '~@angular/material' as mat;

@include mat.core();
@include mat.strong-focus-indicators(); //  <-- Aca activa la parte estructual de los strong-focus-indicators

$my-primary: mat.define-palette(mat.$indigo-palette, 500);
$my-accent: mat.define-palette(mat.$pink-palette, A200, A100, A400);

$my-theme: mat.define-light-theme((
 color: (
   primary: $my-primary,
   accent: $my-accent,
 )
));

@include mat.all-component-themes($my-theme);
@include mat.strong-focus-indicators-theme($my-theme); //   <-- y aca esta activando la parte de colores de los strong-focus-indicators
/*
### Customizing strong focus indicators
You can pass a configuration map to strong-focus-indicators to customize the appearance of the indicators. This configuration includes border-style, border-width, and border-radius.
You also can customize the color of indicators with strong-focus-indicators-theme. This mixin accepts either a theme, as described earlier in this guide, or a CSS color value. When providing a theme, the indicators will use the default hue of the primary palette.
The following example includes strong focus indicator styles with custom settings alongside the rest of the custom theme API.
*/
@use '~@angular/material' as mat;

@include mat.core();
@include mat.strong-focus-indicators(( // <-- Aca incluye la parte estructural (osea la que tiene los bordes, grosor y border-radius
  border-style: dotted,
  border-width: 4px,
  border-radius: 2px,
));

$my-primary: mat.define-palette(mat.$indigo-palette, 500);
$my-accent: mat.define-palette(mat.$pink-palette, A200, A100, A400);

$my-theme: mat.define-light-theme((
 color: (
   primary: $my-primary,
   accent: $my-accent,
 )
));

@include mat.all-component-themes($my-theme);
@include mat.strong-focus-indicators-theme(purple); //  <--  y aca incluye la que tiene la parte de los colores. Se le puede pasar conto un theme como un color CSS como se hizo en este caso
/*
Theming and style encapsulation
Angular Material assumes that, by default, all theme styles are loaded as global CSS. If you want to use Shadow DOM in your application, you must load the theme styles within each shadow root that contains an Angular Material component. You can accomplish this by manually loading the CSS in each shadow root, or by using Constructable Stylesheets.

 Style customization outside the theming system
Angular Material supports customizing color and typography as outlined in this document. Angular strongly discourages, and does not directly support, overriding component CSS outside the theming APIs described above. Component DOM structure and CSS classes are considered private implementation details that may change at any time.

*/